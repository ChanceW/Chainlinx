@page "/signin-google"
@using Microsoft.AspNetCore.Identity
@using ChainLinx.Data
@using System.Security.Claims
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Authentication - ChainLinx</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow">
                <div class="card-body p-4 text-center">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <h4>Completing Authentication</h4>
                    <p class="text-muted">Please wait while we complete your sign-in...</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get the external login info
            var info = await SignInManager.GetExternalLoginInfoAsync();
            
            if (info == null)
            {
                // Handle error - no external login info
                NavigationManager.NavigateTo("/login?error=external_login_failed", true);
                return;
            }

            // Sign in the user with this external login provider
            var result = await SignInManager.ExternalLoginSignInAsync(info.LoginProvider, info.ProviderKey, isPersistent: false, bypassTwoFactor: true);
            
            if (result.Succeeded)
            {
                // User already exists and is signed in
                NavigationManager.NavigateTo("/", true);
            }
            else if (result.IsLockedOut)
            {
                NavigationManager.NavigateTo("/login?error=account_locked", true);
            }
            else
            {
                // User doesn't exist, create a new account
                var email = info.Principal.FindFirstValue(ClaimTypes.Email);
                var user = new IdentityUser { UserName = email, Email = email, EmailConfirmed = true };
                
                var createResult = await UserManager.CreateAsync(user);
                
                if (createResult.Succeeded)
                {
                    // Add the external login
                    var addLoginResult = await UserManager.AddLoginAsync(user, info);
                    
                    if (addLoginResult.Succeeded)
                    {
                        // Sign in the user
                        await SignInManager.SignInAsync(user, isPersistent: false);
                        NavigationManager.NavigateTo("/", true);
                    }
                    else
                    {
                        NavigationManager.NavigateTo("/login?error=external_login_failed", true);
                    }
                }
                else
                {
                    NavigationManager.NavigateTo("/login?error=account_creation_failed", true);
                }
            }
        }
        catch
        {
            // Handle any errors
            NavigationManager.NavigateTo("/login?error=authentication_error", true);
        }
    }
} 